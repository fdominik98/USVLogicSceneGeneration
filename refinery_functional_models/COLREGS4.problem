class COLREGSScenario {
    contains Vessel[] vessels
    contains COLREGSSituation[] situations
}

class Vessel {}

class COLREGSSituation {
    SituationType[1] type
    Vessel[1] source
    Vessel[1] target
}

enum SituationType {overtaking, crossingFromPort, headOn}

pred isInSituation(Vessel v) <->
    target(_, v); source(_, v).

error pred notInSituation(Vessel v) <->
    !isInSituation(v).

error pred dualSituation(COLREGSSituation s1, COLREGSSituation s2) <-> 
    source(s1, v), target(s1, t), 
    source(s2, v), target(s2, t),
    s1 != s2.

error pred mutualSituation(v, t) <-> 
    source(s1, v), target(s1, t), 
    source(s2, t), target(s2, v).

pred overtaking(Vessel v, Vessel t) <->
    source(s, v), target(s, t), type(s, type), type == overtaking.

pred crossingFromPort(Vessel v, Vessel t) <->
    source(s, v), target(s, t), type(s, type), type == crossingFromPort.

pred headOn(Vessel v, Vessel t) <->
    source(s, v), target(s, t), type(s, type), type == headOn.

pred giveWay(Vessel v) <-> source(_, v); headOn(_, v).

pred standOn(Vessel t) <->
    overtaking(_, t) ; crossingFromPort(_, t).

pred ambigious(Vessel v) <-> giveWay(v), standOn(v).

%atom usv.
Vessel(asv).
default !ambigious(*).
ambigious(asv).

scope Vessel = 3, COLREGSSituation = 2, COLREGSScenario = 1.