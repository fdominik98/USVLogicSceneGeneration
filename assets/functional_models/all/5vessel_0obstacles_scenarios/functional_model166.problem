/*enum VesselType {OtherType, CargoShip, Tanker,
                 ContainerShip, PassengerShip,
                 FishingShip, MotorVessel,
                 SailingVessel, MilitaryVessel}
*/

enum StaticObstacleType {Small, Medium, Large}

abstract class Vessel {
    //VesselType[1] vesselType
    Vessel[0..*] overtakingToPort
    Vessel[0..*] overtakingToStarboard
    Vessel[0..*] crossingFromPort
    Vessel[0..*] headOn opposite headOn
}

class OS extends Vessel.
class TS extends Vessel.

class StaticObstacle {
    //StaticObstacleType[1] staticObstacleType
    OS[1] atDangerousHeadOnSectorOf
}

pred overtaking(Vessel v1, Vessel v2) <->
    overtakingToPort(v1, v2); overtakingToStarboard(v1, v2).

pred giveWay(Vessel v1) <->
    overtaking(v1, _);
    crossingFromPort(v1, _);
    headOn(_, v1).

pred standOn(Vessel v1) <->
    overtaking(_, v1);
    crossingFromPort(_, v1).

pred ambiguous(Vessel v) <->
    giveWay(v), standOn(v).

pred inCOLREGSSituationWith(Vessel v1, Vessel v2) <->
    headOn(v2, v1);
    crossingFromPort(v1, v2);
    crossingFromPort(v2, v1);
    overtaking(v1, v2);
    overtaking(v2, v1).

//------------------------------------------------------------------------

error selfCOLREGSRelation(Vessel v) <->
    overtaking(v, v);
    crossingFromPort(v, v);
    headOn(v, v).


error doubleCOLREGSRelation(Vessel v1, Vessel v2) <->
    headOn(v1, v2), crossingFromPort(v1, v2);
    headOn(v1, v2), overtaking(v1, v2);
    overtaking(v1, v2), crossingFromPort(v1, v2);

    headOn(v1, v2), crossingFromPort(v2, v1);
    headOn(v1, v2), overtaking(v2, v1);
    overtaking(v1, v2), crossingFromPort(v2, v1);

    crossingFromPort(v1, v2), crossingFromPort(v2, v1);
    overtaking(v1, v2), overtaking(v2, v1).


//----------------------------------------------------------------
error notInCOLREGSSituationWithOS(TS ts, OS os) <->
    !inCOLREGSSituationWith(ts, os).

error twoTSInCOLREGSSituation(TS ts1, TS ts2) <->
    inCOLREGSSituationWith(ts1, ts2).

error notDangerousHeadOnWithOS(StaticObstacle o, OS os) <->
    !atDangerousHeadOnSectorOf(o, os).

error moreThanOneOS(OS v1, OS v2) <->
    v1 != v2.

error noOS() <->
    !OS(_).

declare os, ts1, ts2, ts3, ts4.
!exists(OS::new).
!exists(TS::new).
!exists(StaticObstacle::new).
OS(os).
TS(ts1).
TS(ts2).
TS(ts3).
TS(ts4).
default !overtakingToPort(*, *).
overtakingToPort(ts2, os).
overtakingToPort(ts3, os).
overtakingToPort(ts4, os).
default !overtakingToStarboard(*, *).
overtakingToStarboard(ts1, os).
default !crossingFromPort(*, *).
default !atDangerousHeadOnSectorOf(*, *).
default !headOn(*, *).
